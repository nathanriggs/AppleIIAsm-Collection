*
*``````````````````````````````*
* DEMO.LORES                   *
*                              *
* A DEMO OF THE MACROS AND     *
* SUBROUTINES FOR USING LORES  *
* GRAPHICS.                    *
*                              *
* AUTHOR:    NATHAN RIGGS      *
* CONTACT:   NATHAN.RIGGS@     *
*            OUTLOOK.COM       *
*                              *
* DATE:      03-OCT-2019       *
* ASSEMBLER: MERLIN 8 PRO      *
* OS:        DOS 3.3           *
*,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,*
*
** ASSEMBLER DIRECTIVES
*
         CYC   AVE
         EXP   OFF
         TR    ON
         DSK   DEMO.LORES
         OBJ   $BFE0
         ORG   $6000
*
*``````````````````````````````*
*  TOP INCLUDES (PUTS, MACROS) *
*,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,*
*
         PUT   MIN.HEAD.REQUIRED
         USE   MIN.MAC.REQUIRED
         USE   MIN.MAC.LORES
         PUT   MIN.HOOKS.LORES
*
*``````````````````````````````*
         _PRN  "PLOTTING MACROS",8D
         _PRN  "===============",8D8D
*      PROGRAM MAIN BODY       *
*,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,*
*
]COLOR   EQU   VARTAB+16
]HOME    EQU   $FC58
*
         JSR   ]HOME
         _PRN  "LOW RESOLUTION GRAPHICS LIBRARY",8D
         _PRN  "===============================",8D8D
         _PRN  "THIS DEMO ILLUSTRATES HOW TO USE",8D
         _PRN  "THE MACROS DEDICATED TO CREATING",8D
         _PRN  "LORES GRAPHICS. THESE LACROS LARGELY",8D
         _PRN  "CONSIST OF THE MOST MASIC FUCNTIONS",8D
         _PRN  "NECESSARY TO BUILD MORE COMPLE ROUTINES,",8D
         _PRN  "SUCH AS ANIMATION, SPRITES, AND SO ON.",8D8D
         _PRN  "CURRENTLY, THE MACROS AVAILABLE ARE:",8D8D
         _WAIT
         _PRN  " - LVIEWPG: SET VIEWING PAGE",8D
         _PRN  " - LWORKPG: SET WORKING (PLOTTING) PAGE",8D
         _PRN  " - LRGF: INIT LORES FULL SCREEN MODE",8D
         _PRN  " - LRGP: INIT LORES MIXED MODE",8D
         _PRN  " - LFCLR: CLEAR FULL SCREEN MODE TO COLOR",8D
         _PRN  " - LPCLR: CLEAR MIXED MODE TO COLOR",8D
         _PRN  " - LPLOT: PLOT A COLORED PIXEL AT X,Y",8D
         _PRN  " - LLINE: PRINT A LINE FROM X1,Y1 TO X2,Y2",8D
         _PRN  " - LCIRC: CREATE A CIRCLE WITH A GIVEN RADIUS",8D
         _PRN  " - LVLIN: PLOT VERTICAL LINE",8D
         _PRN  " - LHLIN: PLOT HORIZONTAL LINE",8D
         _PRN  " - LRGET: GET COLOR OF PIXEL AT X,Y",8D
         _PRN  " - LCHAR: PRINT A LORES CHARACTER AT X,Y",8D
         _WAIT
*
         JSR   ]HOME
         _PRN  "SETTING THE WORKING AND VIEWING PAGE",8D
         _PRN  "====================================",8D8D
         _PRN  "THE 'WORKING PAGE' IS THE VIDEO MEMORY",8D
         _PRN  "PAGE THAT GETS PLOTTED TO FROM EACH",8D
         _PRN  "MACRO, WHEREAS THE 'VIEWING PAGE' IS THE",8D
         _PRN  "PAGE THAT IS CURRENTLY DISPLAYED ON SCREEN.",8D
         _PRN  "THIS SETUP IS USEFUL FOR WHAT IS KNOWN AS",8D
         _PRN  "PAGE-FLIPPING: ALTERING THE OFFSCREEN PAGE ",8D
         _PRN  "WHILE THE OTHER PAGE IS BEING VIEWED, THEN",8D
         _PRN  "FLIPPING THE VIEWING PAGE FOR QUICK SWITCHING",8D
         _PRN  "AND ANIMATION.",8D8D
         _WAIT
         _PRN  "TO SET THE WORKING PAGE, USE THE LWORKPG MACRO.",8D
         _PRN  "TO SET THE VIEW PAGE, USE THE LVIEWP MACRO.",8D
         _PRN  "THESE WORK AS SUCH:",8D8D
         _PRN  "  LWORKPG #2 ",8D
         _PRN  "  LVIEWPG #1",8D8D
         _WAIT
         _PRN  "*** HOWEVER ***, THERE IS A MINOR CAVEAT HERE:",8D
         _PRN  "IF YOU'RE RUNNING A MERLIN DISK, PAGE 2 IS NOT",8D
         _PRN  "AVAILABLE TO USE, AS MERLIN USES IT FOR DATA STORAGE.",8D
         _PRN  "ANY DEMO THAT TRIES TO USE PAGE 2 ON A MERLIN",8D
         _PRN  "DISK WILL GET ERRORS OR STRANGE BEHAVIORS.",8D
         _PRN  "THUS, THIS DEMO WILL ONLY UTILIZE PAGE 1.",8D8D
         _WAIT
         JSR   ]HOME
         _PRN  "INITIALIZING LORES GRAPHICS MODE",8D
         _PRN  "================================",8D8D
         _PRN  "TO BEGIN USING LOW RESOLUTION GRAPHINCS,"8D
         _PRN  "YOU MUST FIRST DECIDE WHETHER TO USE FULL",8D
         _PRN  "SCREEN MODE, WITH A RESOLUTION OF 40X48 PIXELS,",8D
         _PRN  "OR MIXED MODE, WITH HAS A 40X40 RESOLUTION",8D
         _PRN  "WITH AN ADDITIONAL FOUR BOTTOM LINES FOR",8D
         _PRN  "DISPLAYING TEXT.",8D8D
         _WAIT
         _PRN  "TO INITIALIZE FULL SCREEN MODE, USE THE ",8D
         _PRN  "LRFGR MACRO (NO PARAMTERS). TO USE MIXED MODE,",8D
         _PRN  "UTILIZE THE LRPGR MACRO.",8D8D
         _WAIT
         _PRN  "LASTLY, THERE'S A MATTER OF CLEARING THE SCREEN IN",8D
         _PRN  "EACH MODE. THIS IS ACCOMPLISHED WITH THE LRFCLR ",8D
         _PRN  "MACRO FOR FULL-SCREEN MODE AND WITH THE LRPCLR",8D
         _PRN  "FOR MIXED GRAPHICS MODE. THESE BOTH USE A ",8D
         _PRN  "PARAMETER THAT DETERMINES THE BACKGROUND COLOR ",8D
         _PRN  "USED TO FILL THE SCREEN, AS SUCH:",8D8D
         _PRN  "  LRFCLR #]BLACK",8D8D
         _WAIT
         _PRN  "FOR THIS DEMO, WE'LL EXCLUSIVELY USE FULL",8D
         _PRN  "SCREEN MODE. LET'S TEST CLEARING THE SCREEN WITH",8D
         _PRN  "ALL 16 COLORS BEFORE MOVING ONL PRESS A KEY",8D
         _PRN  "TO CONTINUE TO THE NEXT SCREEN."
         _WAIT
         LWORKPG #1       ; SET WORKING PAGE AND
         LVIEWPG #1       ; TO PAGE 1. PAGE 2 WILL NOT WORK
         LRGF             ; WITH MERLIN LOADED; THEN, INIT
         LDY   #$FF       ; LORES GRAPHICS FULL SCREEN MODE
         STY   ]COLOR     ; MAC COLOR - 1
:LP1
         INC   ]COLOR     ; INCREASE THE COLOR
         LFCLR ]COLOR     ; CLEAR FULL SCREEN WITH COLOR SELECTED
         _WAIT            ; WAIT UNTIL KEYPRESS
         LDA   ]COLOR     ; LOAD COLOR AGAIN
         CMP   #$F        ; IF IT'S $F (15), THEN
         BNE   :LP1       ; WE ARE DONE DEMOING SCREEN FILLS
*
         BIT   TEXTON
         JSR   ]HOME
         _PRN  "THE NEXT COMMAND FOR LOW RESOLUTION",8D
         _PRN  "GRAPHICS IS THE MACRO LPLOT, WHICH ",8D
         _PRN  "SIMPLY PLOTS A PIXEL AT THE GIVEN X,Y",8D
         _PRN  "COORDINATE IN THE SPECIFIED COLOR.",8D8D
         _WAIT
         _PRN  "FURTHER, JUST LIKE APPLESOFT BASIC, WE",8D
         _PRN  "HAVE MACROS FOR CREATING HORIZONTAL",8D
         _PRN  "AND VERTICAL LINES QUICKLY. THESE",8D
         _PRN  "ARE CALLED LHLIN AND LVLIN, RESPECTIVELY,",8D
         _PRN  "AND ACCEPT AN X OR Y STARTING POINT,",8D
         _PRN  "AN X OR Y ENDPOINT, AN X OR Y LINE",8D
         _PRN  "POSITION (WHICH DOES NOT CHANGE), AND THE",8D
         _PRN  "SPECIFIED COLOR.",8D8D
         _WAIT
         JSR   ]HOME
         _PRN  "BEYOND THESE ROUTINES THAT CAN BE FOUND",8D
         _PRN  "IN APPLESOFT BASIC, THERE ARE TWO MORE",8D
         _PRN  "PLOTTING MACROS WORTH NOTING: LLINE AND",8D
         _PRN  "LCIRC.",8D8D
         _WAIT
         _PRN  "LLINE CREATES A DIAGONAL LINE FROM ONE",8D
         _PRN  "ORIGIN X,Y COORDINATE TO A DESTINATION",8D
         _PRN  "X,Y COORDINATE IN A GIVEN COLOR. THIS",8D
         _PRN  "USES BRESSENHAM'S LINE ALGORITHM, WHICH",8D
         _PRN  "IS ONE OF THE FASTEST ALGORITHMS THAT",8D
         _PRN  "CAN BE USED FOR LINES ON 8-BIT SYSTEMS.",8D8D
         _WAIT
         _PRN  "THE OTHER MACRO, LCIRC, ALSO USES AN",8D
         _PRN  "ALGORITHM DEVELOPED BY BRESSENHAM, EXCEPT",8D
         _PRN  "THIS TIME TO CREATE CIRCLES. PLEASE TAKE",8D
         _PRN  "A MOMENT OF SILENCE TO THANK THIS",8D
         _PRN  "BRILLIANT MAN, AND THEN PRESS RETURN...",8D
         _WAIT
         JSR   ]HOME
         _PRN  "ALL RIGHT!",8D8D
         _PRN  "WE SHOULD PROBABLY TEST THESE NOW. FIRST,",8D
         _PRN  "LET'S HAVE A LOOK AT THE LISTING THAT",8D
         _PRN  "WILL BE IMPLEMENTED. AFTER READING THROUGH",8D
         _PRN  "IT, PRESS A KEY TO SEE IT IN ACTION. NOTE",8D
         _PRN  "THAT YOU WILL HAVE TO PRESS A KEY AFTER",8D
         _PRN  "EACH MACRO IS SHOWCASED.",8D8D
         _WAIT
         _PRN  "  LPLOT #10;#10;#]MAGENTA",8D
         _PRN  "  LPOT #11;#11;#]PINK",8D
         _PRN  "  _WAIT",8D
         _PRN  "  LHLIN #15;#30;#2;#]PURPLE",8D
         _PRN  "  _WAIT",8D
         _PRN  "  LVLIN #2;#17;#30;#]YELLOW",8D
         _PRN  "  _WAIT",8D
         _PRN  "  LLINE #1;#1;#20;#30;#]ORANGE",8D
         _PRN  "  _WAIT",8D
         _PRN  "  LCIRC #10;#10;#10;#]LBLUE",8D
         _PRN  "  _WAIT",8D
         _WAIT
*
         LRGF
         LFCLR #]WHITE
         LPLOT #10;#10;#]MAGENTA ; PLOT MAGENTA PIXEL AT 10,10
         LPLOT #11;#11;#]PINK    ; PLOT PINK PIXEL AT 11,11
         _WAIT            ; WAIT UP
*
         LHLIN #15;#30;#2;#]PURPLE ; NOW DRAW A HORIZONTAL
         _WAIT            ; LINE FROM X1 TO X2 AT Y
*
         LVLIN #2;#17;#30;#]YELLOW ; NOW CREATE A YELLOW VERTICAL LINE
         _WAIT
         LLINE #1;#1;#20;#30;#]ORANGE ; NOW PLOT ORGANGE DIAGONAL
         _WAIT            ; line from X1,Y2 to X2,Y2
*
         LCIRC #10;#10;#10;#]LBLUE ; NOW DRAW A LIGHT BLUE CIRCLE
         _WAIT
*
** THE ABOVE HAS FINISHED THE MOST BASIC PLOTTING MECHANISMS
** IN THE LORES LIBRARY.
*
         LRGET #38;#38    ; NOW GET THE COLOR OF A GIVE PIXEL
         BIT   TEXTON
         JSR   ]HOME
         _PRN  "AN ADDITIONAL MACR THAT COMES IN",8D
         _PRN  "HANDY IS THE LRGET MACRO, WHICH",8D
         _PRN  "RETURNS THE COLOR OF A PIXEL AT",8D
         _PRN  "THE GIVEN X,Y COORDINATE.",8D8D
         _PRN  "CURRENTLY, THIS MACRO HAS A QUIRK THAT",8D
         _PRN  "NEEDS TO BE CONSIDERED: WHEN OR NOT",8D
         _PRN  "THE Y COORDINATE IS EVEN OR ODD WILL",8D
         _PRN  "DETERMINE WHETHER THE COLOR IS RETURNED",8D
         _PRN  "IN THE LOW BYTE OR HIGH BYTE OF ",8D
         _PRN  "THE BYTE RETURNED BY THE MACRO. ",8D8D
         _PRN  "IF THE Y COORDINATE IS EVEN, THEN THE ",8D
         _PRN  "COLOR WILL BE RETURNED IN THE HIGH",8D
         _PRN  "BYTE; IF ODD, THEN THE COLOR IS ",8D
         _PRN  "RETURNED IN THE LOW BYTE. FUTURE ",8D
         _PRN  "REVISIONS OF THIS MACRO WILL FIX THE",8D
         _PRN  "QUIRK FOR GOOD.",8D8D
         _WAIT
         _PRN  "THUS, THE INSTRUCTION 'LRGET #38;#38; FROM",8D
         _PRN  "THE PREVIOUS SCREEN WOULD RETURN '0F'.",8D
         _WAIT
         DUMP  #RETURN;#1 ; THE ROW IS EVEN, AND IN THE LOW BYTE
         _WAIT            ; IF ROW IS ODD
*
** THE FOLLOWING LINES PLOT ALL OF THE LORES CHARACTERS IN
** THE SET INCLUDED IN THE LIBRARY, TOTALLING 64. NOTE THAT
** THESE ARE 4X5 IN SIZE SO AS TO ALLOW FOR 8 CHARACTER WITH
** SPACES IN BETWEEN THEM TO FIT BOTH HORIZONTALLY AND
** VERTICALLY ON THE 40*48 LORES FULL SCREEN. ALSO NOTE THAT
** EACH CHARACTER IS THREE BYTES LONG, RELYING ON BIT VALUES
** TO DETERMINE IF PRAT OF A CHARACTER SHOULD BE PLOTTED.
*
         JSR   ]HOME
         _PRN  "LOW RESOLUTION TEXT CHARACTERS",8D
         _PRN  "==============================",8D
         _PRN  "ONE LAST FEATURE OF THE LORES",8D
         _PRN  "GRAPHICS LIBRARY IS THE LCHAR MACRO,",8D
         _PRN  "WHICH PRINTS A CUSTOM LORES FONT",8D
         _PRN  "CHARACTER THAT IS 4 PIXELS WIDE AND",8D
         _PRN  "6 PIXELS HIGH (THE LAST LINE IS",8D
         _PRN  "USUALLY BLANK) TO ALLOW FOR 8 LETTERS",8D
         _PRN  "TO FIT ON THE SCREEN BOTH ",8D
         _PRN  "HORIZONTALLY AND VERTICALLY.",8D8D
         _WAIT
         _PRN  "THESE CHARACTERS ARE THREE BYTES EACH,",8D
         _PRN  "AND THEIR SHAPES ARE STORED IN BINARY",8D
         _PRN  "TO SAVE SPACE. THE MACRO WORKS AS SUCH:",8D8D
         _PRN  "  LCHAR #15;#6;LR_A;#]DBLUE",8D8D
         _PRN  "WHICH WOULD PRINT AN 'A' CHARACTER AT",8D
         _PRN  "THE COORDINATES 15,16 IN DARK BLUE.",8D8D
         _WAIT
         _PRN  "LET'S NOW SEE THIS IN ACTION, FOR EACH",8D
         _PRN  "DEFAULT CHARACTER. IT SHOULD BE NOTED THAT",8D
         _PRN  "YOU CAN ALSO ADD YOUR OWN EXTENDED",8D
         _PRN  "CHARACTERS, AS LONG AS YOU FOLLOW THE ",8D
         _PRN  "SAME 3-BYTE FORMAT.",8D8D
         _WAIT
*
         LRGF             ; GO BACK TO FULL SCREEN LORES GRAPHICS
         LFCLR #]WHITE    ; CLEAR THE BACKGROUND TO WHITE
         LCHAR #0;#0;LR_A;#0
         LCHAR #5;#0;LR_B;#1
         LCHAR #10;#0;LR_C;#2
         LCHAR #15;#0;LR_D;#3
         LCHAR #20;#0;LR_E;#4
         LCHAR #25;#0;LR_F;#5
         LCHAR #30;#0;LR_G;#6
         LCHAR #35;#0;LR_H;#7
         LCHAR #0;#6;LR_I;#8
         LCHAR #5;#6;LR_J;#9
         LCHAR #10;#6;LR_K;#10
         LCHAR #15;#6;LR_L;#11
         LCHAR #20;#6;LR_M;#12
         LCHAR #25;#6;LR_N;#13
         LCHAR #30;#6;LR_O;#14
         LCHAR #35;#6;LR_P;#0
         LCHAR #0;#12;LR_Q;#1
         LCHAR #5;#12;LR_R;#2
         LCHAR #10;#12;LR_S;#3
         LCHAR #15;#12;LR_T;#4
         LCHAR #20;#12;LR_U;#5
         LCHAR #25;#12;LR_V;#6
         LCHAR #30;#12;LR_W;#7
         LCHAR #35;#12;LR_X;#8
         LCHAR #0;#18;LR_Y;#9
         LCHAR #5;#18;LR_Z;#10
         LCHAR #10;#18;LR_0;#11
         LCHAR #15;#18;LR_1;#12
         LCHAR #20;#18;LR_2;#13
         LCHAR #25;#18;LR_3;#14
         LCHAR #30;#18;LR_4;#0
         LCHAR #35;#18;LR_5;#1
         LCHAR #0;#24;LR_6;#2
         LCHAR #5;#24;LR_7;#3
         LCHAR #10;#24;LR_8;#4
         LCHAR #15;#24;LR_9;#5
         LCHAR #20;#24;LR_EXC;#6
         LCHAR #25;#24;LR_QUEST;#7
         LCHAR #30;#24;LR_PRD;#8
         LCHAR #35;#24;LR_CMA;#9
         LCHAR #0;#30;LR_APOST;#10
         LCHAR #5;#30;LR_QUOT;#11
         LCHAR #10;#30;LR_COLON;#12
         LCHAR #15;#30;LR_SEMI;#13
         LCHAR #20;#30;LR_MINUS;#14
         LCHAR #25;#30;LR_PLUS;#0
         LCHAR #30;#30;LR_EQUAL;#1
         LCHAR #35;#30;LR_CHECKER1;#2
         LCHAR #0;#36;LR_CHECKER2;#3
         LCHAR #5;#36;LR_UP;#4
         LCHAR #10;#36;LR_DOWN;#5
         LCHAR #15;#36;LR_LEFT;#6
         LCHAR #20;#36;LR_RIGHT;#7
         LCHAR #25;#36;LR_FSLASH;#8
         LCHAR #30;#36;LR_BSLASH;#9
         LCHAR #35;#36;LR_LPAR;#10
         LCHAR #0;#42;LR_RPAR;#11
         LCHAR #5;#42;LR_BLOCK;#12
         LCHAR #10;#42;LR_GOOMBA;#13
         LCHAR #15;#42;LR_PERCENT;#14
         LCHAR #20;#42;LR_BULLET;#0
         LCHAR #25;#42;LR_OFACE;#1
         LCHAR #30;#42;LR_HFACE;#2
         LCHAR #35;#42;LR_SFACE;#3
         _WAIT
*
** LASTLY,WE HVE A MORE COMPLICATED DEMO SHOING MOST OF
** THE REST OF THE ROUTINES WORKING IN UNISON. THIS IS NOT
** MEANT TO BE IMPRESSIVE OR EVEN SPEEDY; IT SIMPLY SHOWS WHAT
** CAN BE ACCOMPLISHED WITH VERY LITTLE OVERHEAD.
*
** TO EXIT THE DEMO, YOU WILL HAVE TO ISSUE A CONTROL-BREAK, AS
** THE END OF THE DEMO IS N INFINITE LOOP.
*
*
         BIT   TEXTON
         JSR   ]HOME
         _PRN  "FINALLY, JUST FOR FUN, LET'S USE",8D
         _PRN  "SOME OF THESE MACROS TO CREATE",8D
         _PRN  "A SIMPLE ANIMATED SCREEN. NOTE THAT",8D
         _PRN  "WHILE THESE LORES MACROS ARE PERFECTLY",8D
         _PRN  "APPROPRIATE FOR MOST USES, THEY WOULD NEED",8D
         _PRN  "A LOT OF REWORKING TO COMPARE TO A",8D
         _PRN  "DEMOSCENE PROGRAM. FOR MOST GAMES AND DRAWING",8D
         _PRN  "UTILITIES, HOWEVER, THESE SHOULD WORK FINE.",8D8D
         _WAIT
         _PRN  "WHEN YOU ARE DONE WATCHING THE SHORT DEMO,",8D
         _PRN  "USE CTRL-BREAK TO END THE PROGRAM.",8D
         _WAIT
         LRGF
         LFCLR #]BLACK
         LDA   #1
         STA   ]CC1
:RELOOP
         LVLIN #0;#47;]HH;]CC1
         INC   ]HH
         INC   ]CC1
         LDY   ]HH
         CPY   #39
         BNE   :CONTLP0
         LDA   #0
         STA   ]HH
*
:CONTLP0
         LCHAR #10;#37;LR_K;#0
         LCHAR #15;#38;LR_I;#0
         LCHAR #20;#39;LR_L;#0
         LCHAR #25;#40;LR_L;#0
         INC   ]CC1
         LDY   ]CC1
         CPY   #15
         BNE   :CONTLP
         LDY   #1
         STY   ]CC1
:CONTLP
         LDA   #1
         STA   ]CC
         STA   ]RR
:LPC
         LCIRC #19;#19;]RR;]CC
         INC   ]RR
         INC   ]CC
         LDY   ]RR
         CPY   #15
         BEQ   :QLPC
         JMP   :LPC
:QLPC
         LDA   #1
         STA   ]CC
:LPC2
         LCIRC #19;#19;]RR;]CC
         DEC   ]RR
         INC   ]CC
         LDY   ]RR
         CPY   #1
         BNE   :LPC2
         JMP   :RELOOP
*
         _WAIT
         LDA   TEXTON
         JMP   $3D0
*
*``````````````````````````````*
*        BOTTOM INCLUDES       *
*,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,*
*
** BOTTOM INCLUDES
*
         PUT   MIN.LIB.REQUIRED
*
** INDIVIDUAL SUBROUTINE INCLUDES
*
         PUT   MIN.SUB.LRGFCLR
         PUT   MIN.SUB.LRGPCLR
         PUT   MIN.SUB.LRPLOT
         PUT   MIN.SUB.LRHLINE
         PUT   MIN.SUB.LRVLINE
         PUT   MIN.SUB.LRBLINE
         PUT   MIN.SUB.LRCIRCLE
         PUT   MIN.SUB.LRGETPIX
         PUT   MIN.SUB.LRCHAR
*
]RR      DS    1
]CC      DS    1
]HH      DS    1
]CC1     DS    1
