MEMFILL
         PLA
         STA   RETADR
         PLA
         STA   RETADR+1
         PLA
         STA   :VALUE
         PLA
         STA   :ARYSZ
         PLA
         STA   :ARYSZ+1
         PLA
         STA   ADDR1      ; ZERO PAGE POINTER
         PLA              ; DEFINED IN
         STA   ADDR1+1    ; DECS
         LDA   :VALUE     ; GET VAL FOR FILL
         LDX   :ARYSZ+1   ; X=# OF PAGES TO DO
         BEQ   :PARTPG    ; BRANCH IF HIGHBYTE OF SZ = 0
         LDY   #0
:FULLPG
         STA   (ADDR1),Y
         INY              ; INC TO NEXT BYTE
         BNE   :FULLPG    ; BRANCH IF NOT DONE W/ PAGE
         INC   ADDR1+1    ; ADVANCE TO NEXT PAGE
         DEX
         BNE   :FULLPG    ; BRANCH IF NOT DONE W/ PAGES
:PARTPG
         LDX   :ARYSZ     ;GET # OF BYTES IN FINAL PAGE
         BEQ   :EXIT      ; BRANCH IF LOW BYTE = 0
         LDY   #0
:PARTLP
         STA   (ADDR1),Y  ; STORE VAL
         INY              ; INCREMENT INDEX
         DEX              ; DECREMENT COUNTER
         BNE   :PARTLP    ; BRANCH IF NOT DONE
:EXIT
         LDA   RETADR+1
         PHA
         LDA   RETADR
         PHA
         RTS
:VALUE   DS    1          ; FILL VALUE
:ARYSZ   DS    2          ; ARRAY SIZE
MEMMOVE
         PLA
         STA   RETADR
         PLA
         STA   RETADR+1
         PLA
         STA   :MVELEN
         PLA
         STA   :MVELEN+1
         PLA
         STA   ADDR2      ; ZERO PAGE POINTER
         PLA
         STA   ADDR2+1
         PLA
         STA   ADDR1
         PLA
         STA   ADDR1+1
         LDA   ADDR2      ;CALC DEST-SRC
         SEC
         SBC   ADDR1
         TAX
         LDA   ADDR2+1
         SBC   ADDR1+1    ; MOD 64K AUTOMATIC
                          ; -- DISCARD CARRY
         TAY
         TXA              ; CMP WITH # OF BYTES TO MOVE
         CMP   :MVELEN
         TYA
         SBC   :MVELEN+1
         BCS   :DOLEFT    ; BRANCH IF NO OVERLAP
         JSR   :MVERHT
         JMP   :EXIT
:DOLEFT
         JSR   :MVELEFT
:EXIT
         JMP   :MREXIT
:MVELEFT
         LDY   #0         ; ZERO INDEX
         LDX   :MVELEN+1  ; X=# OF FULL PP TO MOVE
         BEQ   :MLPART    ; IF X=0, DO PARTIAL PAGE
:MLPAGE
         LDA   (ADDR1),Y
         STA   (ADDR2),Y  ;MOVE ONE BYTE
         INY              ; NEXT BYTE
         BNE   :MLPAGE    ; CONT UNTIL 256B MOVED
         INC   ADDR1+1    ; ADV TO NEXT SRC PAGE
         INC   ADDR2+1    ; ADV NEXT DEST PAGE
         DEX              ; DEC PAGE COUNT
         BNE   :MLPAGE    ; CONT UNTIL ALL FULL
                          ; PAGES ARE MOVED
:MLPART
         LDX   :MVELEN    ; GET LENGTH OF LAST PAGE
         BEQ   :MLEXIT    ; BR IF LENGTH OF LAST
                          ; PAGE = 0
                          ; REG Y IS 0
:MLLAST
         LDA   (ADDR1),Y
         STA   (ADDR2),Y  ; MOVE BYTE
         INY              ; NEXT BYTE
         DEX              ; DEC COUNTER
         BNE   :MLLAST    ; CONT UNTIL LAST P DONE
:MLEXIT
         JMP   :MREXIT
:MVERHT
         LDA   :MVELEN+1
         CLC
         ADC   ADDR1+1
         STA   ADDR1+1    ;POINT TO LAST P OF SRC
         LDA   :MVELEN+1
         CLC
         ADC   ADDR2+1
         STA   ADDR2+1    ; POINT TO LAST P OF DEST
         LDY   :MVELEN    ;GET LENGTH OF LAST PAGE
         BEQ   :MRPAGE    ; IF Y=0 DO THE FULL PAGES
:MR0
         DEY              ; BACK UP Y TO NEXT BYTE
         LDA   (ADDR1),Y
         STA   (ADDR2),Y  ; MOVE BYTE
         CPY   #0
         BNE   :MR0       ; BR IF NOT DONE W LAST P
:MRPAGE
         LDX   :MVELEN+1  ; GET BYTE OF COUNT AS P CT
         BEQ   :MREXIT    ; BR IF HYBYTE = 0 (NO FULL P)
:MR1
         DEC   ADDR1+1    ; BACK UP TO PREV SRC PAGE
         DEC   ADDR2+1    ; AND DEST
:MR2
         DEY              ; BACK UP Y TO NEXT BYTE
         LDA   (ADDR1),Y
         STA   (ADDR2),Y  ; MOVE BYTE
         CPY   #0
         BNE   :MR2       ; BR IF NOT DONE W THIS PAGE
         DEX
         BNE   :MR1       BR IF NOT ALL PAGES MOVED
:MREXIT
         LDA   RETADR+1
         PHA
         LDA   RETADR
         PHA
         RTS
:MVELEN  DS    2
DELAYMS
MSCNT    EQU   $0CA       ; 202 TIMES THROUGH DELAY1
                          ; SPECIFIC TO 1.23 MHZ
                          ; SPEED OF APPLE II
:DELAY
         CPY   #0         ; 2 CYCLES
         BEQ   :EXIT      ; 2C (EXIT IF DEL=0)
         NOP              ; 2 CYCLES (MAKE OVERHEAD=25C)
         CPY   #1         ; 2 CYCLES
         BNE   :DELAYA    ; 3C IF TAKEN, ELSE 2C
         JMP   :LAST1     ; 3C
:DELAYA
         DEY              ; 2C (PREDEC Y)
:DELAY0
         LDX   #MSCNT     ; 2C
:DELAY1
         DEX              ; 2C
         BNE   :DELAY1    ; 3C
         NOP              ; 2C
         NOP              ; 2C
         DEY              ; 2C
         BNE   :DELAY0    ; 3C
:LAST1
         LDX   #MSCNT-3   ; 2C
:DELAY2
         DEX              ; 2C
         BNE   :DELAY2    ; 3C
:EXIT
         RTS              ; 6C
ZMSAVE
         LDX   ADDR1
         LDY   ADDR1+1
         PLA
         STA   :RETADR    ; LOCAL BECAUSE RETADDR
         PLA              ; IS STORED ON ZERO PAGE
         STA   :RETADR+1
         PLA
         STA   ADDR1
         PLA
         STA   ADDR1+1
         TYA              ; STORE ADDR1 VALS
         LDY   #1         ; FIRST
         STA   (ADDR1),Y
         LDY   #0
         TXA
         STA   (ADDR1),Y
         LDY   #2
         LDA   $08
         STA   (ADDR1),Y
         INY
         LDA   $09
         STA   (ADDR1),Y
         INY
         LDA   $19
         STA   (ADDR1),Y
         INY
         LDA   $1E
         STA   (ADDR1),Y
         INY
         LDA   $E3
         STA   (ADDR1),Y
         INY
         LDA   $EB
         STA   (ADDR1),Y
         INY
         LDA   $EC
         STA   (ADDR1),Y
         INY
         LDA   $ED
         STA   (ADDR1),Y
         INY
         LDA   $EE
         STA   (ADDR1),Y
         INY
         LDA   $EF
         STA   (ADDR1),Y
         INY
         LDA   $FA
         STA   (ADDR1),Y
         INY
         LDA   $FB
         STA   (ADDR1),Y
         INY
         LDA   $FC
         STA   (ADDR1),Y
         INY
         LDA   $FD
         STA   (ADDR1),Y
         INY
         LDA   $FE
         STA   (ADDR1),Y
         INY
         LDA   $FF
         STA   (ADDR1),Y
         LDA   :RETADR+1
         PHA
         LDA   :RETADR
         PHA
         RTS
:RETADR  DS    2
ZMLOAD
         PLA
         STA   :RETADR
         PLA
         STA   :RETADR+1
         PLA
         STA   ADDR1
         PLA
         STA   ADDR1+1
         LDY   #2         ; START 2 AHEAD
         LDA   (ADDR1),Y  ; AND PUT ADDR1
         STA   $08        ; AREA LAST
         INY
         LDA   (ADDR1),Y
         STA   $09
         INY
         LDA   (ADDR1),Y
         STA   $19
         INY
         LDA   (ADDR1),Y
         STA   $1E
         INY
         LDA   (ADDR1),Y
         STA   $E3
         INY
         LDA   (ADDR1),Y
         STA   $EB
         INY
         LDA   (ADDR1),Y
         STA   $EC
         INY
         LDA   (ADDR1),Y
         STA   $ED
         INY
         LDA   (ADDR1),Y
         STA   $EE
         INY
         LDA   (ADDR1),Y
         STA   $EF
         INY
         LDA   (ADDR1),Y
         STA   $FA
         INY
         LDA   (ADDR1),Y
         STA   $FB
         INY
         LDA   (ADDR1),Y
         STA   $FC
         INY
         LDA   (ADDR1),Y
         STA   $FD
         INY
         LDA   (ADDR1),Y
         STA   $FE
         INY
         LDA   (ADDR1),Y
         STA   $FF
         LDY   #0
         LDA   (ADDR1),Y
         TAX
         LDA   (ADDR1+1),Y
         TAY
         STX   ADDR1
         STY   ADDR1+1
         LDA   :RETADR+1
         PHA
         LDA   :RETADR
         PHA
         RTS
:RETADR  DS    2
MEMSWAP
         PLA
         STA   RETADR
         PLA
         STA   RETADR+1
         PLA
         STA   :LENGTH
         PLA
         STA   ADDR1
         PLA
         STA   ADDR1+1
         PLA
         STA   ADDR2
         PLA
         STA   ADDR2+1
         LDY   #255       ;  COUNTER
:LP
         INY
         LDA   (ADDR1),Y
         TAX              ; X CONTAINS ADDR1 VAL
         LDA   (ADDR2),Y  ; A CONTAINS ADDR2 VAL
         STA   (ADDR1),Y
         TXA
         STA   (ADDR2),Y
         CPY   :LENGTH
         BNE   :LP
         LDA   RETADR+1
         PHA
         LDA   RETADR
         PHA
         RTS
:LENGTH  DS    1
